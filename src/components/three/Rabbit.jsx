/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import useModelStore from "@/store/useStore";
import gsap from "gsap";
import { useGSAP } from "@gsap/react";

export function Rabbit({ wireframe, ...props }) {
  const { nodes, materials } = useGLTF("/models/rabbit.glb");
  const videoRef = useRef();

  const { light } = useModelStore();

  const imgaeTexture = useTexture("/rabbit-lost.png");
  imgaeTexture.toneMappingExposure = 6;
  imgaeTexture.anisotropy = 16;
  imgaeTexture.wrapS = THREE.RepeatWrapping;
  imgaeTexture.wrapT = THREE.RepeatWrapping;
  imgaeTexture.flipY = false;

  useEffect(() => {
    const video = document.createElement("video");
    video.src = "/rabbitCarrot.mp4";
    video.crossOrigin = "Anonymous";
    video.loop = true;
    video.muted = true;
    video.play();
    const videoTexture = new THREE.VideoTexture(video);
    videoTexture.flipY = false;
    videoRef.current = videoTexture;
  }, []);

  const wireframeMaterial = new THREE.MeshStandardMaterial({
    wireframe: true,
    color: "#FB4700",
    metalness: 1,
    roughness: 1,
  });

  const videoMaterial = new THREE.MeshBasicMaterial({
    map: videoRef.current,
  });

  const emissiveIntensity = light ? 1 : 0;
  const opacity = light ? 0 : 1;

  const imageMaterial = new THREE.MeshStandardMaterial({
    map: imgaeTexture,
    metalness: 1,
    roughness: 1,
    emissive: new THREE.Color(0xfb4700),
    emissiveIntensity: emissiveIntensity,
    transparent: true,
  });

  const imageMaterial1 = new THREE.MeshBasicMaterial({
    map: imgaeTexture,
    transparent: true,
    opacity: opacity,
  });

  const cameraRef = useRef();
  const lens1Ref = useRef();
  const capRef = useRef();
  const caseRef = useRef();
  const screenRef = useRef();
  const usbcRef = useRef();
  const voiceButtonRef = useRef();
  const volumeRef = useRef();

  // useGSAP(() => {
  //   gsap.from(
  //     [
  //       caseRef.current.position,
  //       capRef.current.position,
  //       usbcRef.current.position,
  //       cameraRef.current.position,
  //       lens1Ref.current.position,
  //       volumeRef.current.position,
  //       voiceButtonRef.current.position,
  //       screenRef.current.position,
  //     ],
  //     {
  //       duration: 1,
  //       y: 50,
  //       stagger: 0.2,
  //       ease: "power2.out",
  //       delay: 1,
  //     }
  //   );
  // }, []);

  return (
    <group {...props} dispose={null}>
      <group rotation={[0, 0, 0]}>
        <mesh
          ref={cameraRef}
          name="camera"
          castShadow
          receiveShadow
          geometry={nodes.camera.geometry}
          material={wireframe ? wireframeMaterial : materials.rabbit}
        />
        <mesh
          ref={lens1Ref}
          name="lens1"
          castShadow
          receiveShadow
          geometry={nodes.camera001.geometry}
          material={wireframe ? wireframeMaterial : materials.lens1}
        />
      </group>
      <mesh
        ref={capRef}
        name="cap"
        castShadow
        receiveShadow
        geometry={nodes.cap.geometry}
        material={wireframe ? wireframeMaterial : materials.rabbit}
      />
      <mesh
        ref={caseRef}
        name="case"
        castShadow
        receiveShadow
        geometry={nodes["case"].geometry}
        material={wireframe ? wireframeMaterial : materials.rabbit}
      />
      <mesh
        ref={screenRef}
        name="screen"
        castShadow
        receiveShadow
        geometry={nodes.screen.geometry}
        material={wireframe ? imageMaterial : videoMaterial}
      />
      <mesh
        ref={screenRef}
        name="screen"
        castShadow
        receiveShadow
        geometry={nodes.screen.geometry}
        material={wireframe && imageMaterial1}
      />
      <mesh
        ref={usbcRef}
        name="usbc"
        castShadow
        receiveShadow
        geometry={nodes.usbc.geometry}
        material={wireframe ? wireframeMaterial : materials.lens1}
      />
      <mesh
        ref={voiceButtonRef}
        name="voiceButton"
        castShadow
        receiveShadow
        geometry={nodes.voiceButton.geometry}
        material={wireframe ? wireframeMaterial : materials["Material.006"]}
      />
      <mesh
        ref={volumeRef}
        name="volume"
        castShadow
        receiveShadow
        geometry={nodes.volume.geometry}
        material={wireframe ? wireframeMaterial : materials.rabbit}
      />
    </group>
  );
}

useGLTF.preload("/models/rabbit.glb");
